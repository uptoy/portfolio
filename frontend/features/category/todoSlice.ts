// import {createAsyncThunk, createSlice} from "@reduxjs/toolkit"
// import axios from "axios"
// import type {RootState} from "app/store"

// // here we are typing the types for the state
// export type KanyeState = {
//   data: {quote: string}
//   pending: boolean
//   error: boolean
// }

// const initialState: KanyeState = {
//   data: {quote: "click that button"},
//   pending: false,
//   error: false,
// }

// // This action is what we will call using the dispatch in order to trigger the API call.
// export const getKanyeQuote = createAsyncThunk("kanye/kanyeQuote", async () => {
//   const response = await axios.get("https://api.kanye.rest/")

//   return response.data
// })

// export const kanyeSlice = createSlice({
//   name: "kanye",
//   initialState,
//   reducers: {
//     // leave this empty here
//   },
//   // The `extraReducers` field lets the slice handle actions defined elsewhere, including actions generated by createAsyncThunk or in other slices.
//   // Since this is an API call we have 3 possible outcomes: pending, fulfilled and rejected. We have made allocations for all 3 outcomes.
//   // Doing this is good practice as we can tap into the status of the API call and give our users an idea of what's happening in the background.
//   extraReducers: (builder) => {
//     builder
//       .addCase(getKanyeQuote.pending, (state) => {
//         state.pending = true
//       })
//       .addCase(getKanyeQuote.fulfilled, (state, {payload}) => {
//         // When the API call is successful and we get some data,the data becomes the `fulfilled` action payload
//         state.pending = false
//         state.data = payload
//       })
//       .addCase(getKanyeQuote.rejected, (state) => {
//         state.pending = false
//         state.error = true
//       })
//   },
// })

// // export const selectKanye = (state: RootState) => state.kanye

// export default kanyeSlice.reducer

// // import {createSlice} from "@reduxjs/toolkit"
// // const axios = require("axios")
// // const API_URL = "https://localhost:8080/categories"

// // export const todoSlide = createSlice({
// //   name: "todo",
// //   initialState: {
// //     data: [],
// //   },
// //   reducers: {
// //     addTodo: (state: any, action: any) => {
// //       state.data.push(action.payload)
// //     },
// //     getTodo: (state: any, action: any) => {
// //       state.data = [action.payload]
// //     },
// //   },
// // })

// // export const getTodoAsync = () => async (dispatch: any) => {
// //   try {
// //     const response = await axios.get("https://localhost:8080/categories")
// //     console.log("response", response)
// //     dispatch(getTodo(response.data))
// //   } catch (err) {
// //     console.log("err", err)
// //   }
// // }

// // export const addTodoAsync = (data: any) => async (dispatch: any) => {
// //   try {
// //     // console.log(data);
// //     const response = await axios.post(API_URL, data)
// //     console.log("response", response)
// //     dispatch(addTodo(response.data))
// //     return response.data
// //   } catch (err) {
// //     console.log("err", err)
// //   }
// // }

// // export const {addTodo, getTodo} = todoSlide.actions
// // export const showTodo = (state: any) => state.todo.data
// // export default todoSlide.reducer
